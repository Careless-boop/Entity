// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test.Data;

#nullable disable

namespace Test.Migrations
{
    [DbContext(typeof(ShoeContext))]
    [Migration("20231112230602_test_null")]
    partial class test_null
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Test.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Sum")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Test.Models.Shoes.Shoe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Shoes");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Test.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Test.Unifiers.OrderShoe", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ShoeId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ShoeId");

                    b.HasIndex("ShoeId");

                    b.ToTable("OrderedShoes");
                });

            modelBuilder.Entity("Test.Unifiers.UserCart", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ShoeCId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ShoeCId");

                    b.HasIndex("ShoeCId");

                    b.ToTable("UserCarts");
                });

            modelBuilder.Entity("Test.Unifiers.UserFavorite", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ShoeFId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ShoeFId");

                    b.HasIndex("ShoeFId");

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("Test.Models.Shoes.HighHeels", b =>
                {
                    b.HasBaseType("Test.Models.Shoes.Shoe");

                    b.Property<string>("Heels")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.ToTable("HighHeels", (string)null);
                });

            modelBuilder.Entity("Test.Models.Shoes.HikingBoots", b =>
                {
                    b.HasBaseType("Test.Models.Shoes.Shoe");

                    b.Property<bool>("AreWaterproof")
                        .HasColumnType("bit");

                    b.Property<float>("Traction")
                        .HasColumnType("real");

                    b.ToTable("HikingBoots", (string)null);
                });

            modelBuilder.Entity("Test.Models.Shoes.Sandals", b =>
                {
                    b.HasBaseType("Test.Models.Shoes.Shoe");

                    b.Property<bool>("AreOpenToe")
                        .HasColumnType("bit");

                    b.Property<string>("Strap")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("Sandals", (string)null);
                });

            modelBuilder.Entity("Test.Models.Shoes.Sneackers", b =>
                {
                    b.HasBaseType("Test.Models.Shoes.Shoe");

                    b.Property<string>("Closure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Sneackers");
                });

            modelBuilder.Entity("Test.Models.Shoes.SportShoes", b =>
                {
                    b.HasBaseType("Test.Models.Shoes.Shoe");

                    b.Property<string>("Cushioning")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("HaveArchSupport")
                        .HasColumnType("bit");

                    b.ToTable("SportShoes");
                });

            modelBuilder.Entity("Test.Unifiers.OrderShoe", b =>
                {
                    b.HasOne("Test.Models.Order", "Order")
                        .WithMany("OrderShoe")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Models.Shoes.Shoe", "Shoe")
                        .WithMany("OrderShoe")
                        .HasForeignKey("ShoeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Shoe");
                });

            modelBuilder.Entity("Test.Unifiers.UserCart", b =>
                {
                    b.HasOne("Test.Models.Shoes.Shoe", "ShoeC")
                        .WithMany("UserCarts")
                        .HasForeignKey("ShoeCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Models.User", "User")
                        .WithMany("UserCarts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShoeC");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Test.Unifiers.UserFavorite", b =>
                {
                    b.HasOne("Test.Models.Shoes.Shoe", "ShoeF")
                        .WithMany("UserFavorites")
                        .HasForeignKey("ShoeFId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Models.User", "User")
                        .WithMany("UserFavorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShoeF");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Test.Models.Shoes.HighHeels", b =>
                {
                    b.HasOne("Test.Models.Shoes.Shoe", null)
                        .WithOne()
                        .HasForeignKey("Test.Models.Shoes.HighHeels", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test.Models.Shoes.HikingBoots", b =>
                {
                    b.HasOne("Test.Models.Shoes.Shoe", null)
                        .WithOne()
                        .HasForeignKey("Test.Models.Shoes.HikingBoots", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test.Models.Shoes.Sandals", b =>
                {
                    b.HasOne("Test.Models.Shoes.Shoe", null)
                        .WithOne()
                        .HasForeignKey("Test.Models.Shoes.Sandals", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test.Models.Shoes.Sneackers", b =>
                {
                    b.HasOne("Test.Models.Shoes.Shoe", null)
                        .WithOne()
                        .HasForeignKey("Test.Models.Shoes.Sneackers", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test.Models.Shoes.SportShoes", b =>
                {
                    b.HasOne("Test.Models.Shoes.Shoe", null)
                        .WithOne()
                        .HasForeignKey("Test.Models.Shoes.SportShoes", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test.Models.Order", b =>
                {
                    b.Navigation("OrderShoe");
                });

            modelBuilder.Entity("Test.Models.Shoes.Shoe", b =>
                {
                    b.Navigation("OrderShoe");

                    b.Navigation("UserCarts");

                    b.Navigation("UserFavorites");
                });

            modelBuilder.Entity("Test.Models.User", b =>
                {
                    b.Navigation("UserCarts");

                    b.Navigation("UserFavorites");
                });
#pragma warning restore 612, 618
        }
    }
}
